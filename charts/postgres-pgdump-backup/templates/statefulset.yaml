{{- $fullName := include "postgres-backup-local.fullname" . -}}

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $fullName }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ $fullName }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  serviceName: {{ $fullName }}
  replicas: {{ .Values.replicas }}
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        {{- include "postgres-backup-local.labels" . | nindent 8 }}
    spec:
      initContainers:
        # fix volume permissions
        - name: fix-volumes
          image: busybox
          command:
            - /bin/sh
            - -c
            - |
              chown 999:999 {{ .Values.persistence.mountPath  }} -R
          volumeMounts:
            - name: backup-storage
              mountPath: {{ .Values.persistence.mountPath  }}
              {{- if .Values.persistence.subPath }}
              subPath: .Values.persistence.subPath
              {{- end }}
          securityContext:
            privileged: true
            runAsUser: 0
            runAsGroup: 0
            runAsNonRoot: false
      containers:
        - name: {{ $fullName }}
          image: {{ .Values.image.repository }}:{{  required "Please set an image.tag with your desired pg version!" .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: 8080
              name: health
#          livenessProbe:
#            httpGet:
#              port: 8080
          volumeMounts:
            - name:  backup-storage
              mountPath: {{ .Values.persistence.mountPath  }}
              {{- if .Values.persistence.subPath }}
              subPath: .Values.persistence.subPath
              {{- end }}
          envFrom:
            - configMapRef:
                name: {{ $fullName }}
            {{- if not .Values.postgres.auth.existingSecretName }}
            - secretRef:
                name: {{ $fullName }}
            {{ else }}
            - secretRef:
                name: {{ .Values.postgres.auth.existingSecretName }}
            {{ end }}
          securityContext:
            allowPrivilegeEscalation: false
            runAsUser: 999
            runAsGroup: 999
            runAsNonRoot: true
      volumes:
        {{- if not .Values.persistence.enabled }}
        - name: backup-storage
          emptyDir: { }
        {{- else }}
        - name:  backup-storage
          persistentVolumeClaim:
            {{- if .Values.persistence.existingClaim }}
            claimName: {{ .Values.persistence.existingClaim }}
            {{ else }}
            claimName: {{ $fullName }}
            {{- end }}
        {{- end }}
      securityContext:
        fsGroup: 999
        fsGroupChangePolicy: "Always"

