postgres:
  # host:
  port: 5432
  auth:
    # either create the secret yourself
    # existingSecretName: "my-existing-secret"
    # or provide the user/password here and the secret will be created for you
    # user:
    # password:

backup:
  database:
    # Pick specific databases for the backup. Ensure to set backup.database.all to FALSE if you do that
    # If you are using backup.database.all=TRUE you have to set the default database here
    # see https://github.com/prodrigestivill/docker-postgres-backup-local/blob/main/backup.sh#L80=
    names: auth
    # set this to TRUE backup all databases, not just the one given in backup.database.names
    all: "TRUE"
  # arguments passed to pg_dump/pg_dumpall
  dumpExtraOpts: ""
  schedule: "@daily"
  retention:
    keepDays: 7
    keepWeeks: 4
    keepMonths: 6

monitoring:
  service:
    # if enabled, exposing the monitoring port as a service
    enabled: false
    # the port the monitoring port is exposed with
    port: 8080

## Add extra env variables to the container, e.g. to enabled SSLmode 
## env:
##   PGSSLMODE: require"
env: []

replicas: 1

persistence:
  ## @param persistence.enabled Enable postgres-backup-local data persistence using PVC
  ##
  enabled: true

  ## @param persistence.storageClass PVC Storage Class for postgres-backup-local data volume
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "local-path"

  ## @param persistence.selector Selector to match an existing Persistent Volume
  ## selector:
  ##   matchLabels:
  ##     app: my-app
  ##
  selector: {}
  ## @param persistence.accessMode PVC Access Mode for postgres-backup-local data volume
  ##
  accessMode: ReadWriteOnce

  ## @param persistence.existingClaim Provide an existing PersistentVolumeClaims
  # existingClaim:

  ## @param persistence.mountPath The path the volume will be mounted at
  ##
  mountPath: /backups

  ## @param persistence.subPath The subdirectory of the volume to mount to
  ## Useful in dev environments and one PV for multiple services
  ##
  subPath: ""

  ## @param persistence.size PVC Storage Request for postgres-backup-local data volume
  ##
  size: 30Gi

  ## @param persistence.annotations Persistence annotations. Evaluated as a template
  ## Example:
  ## annotations:
  ##   example.io/disk-volume-type: SSD
  ##
  annotations: {}

image:
  repository: prodrigestivill/postgres-backup-local
  # pick the pg version here: 13, 14 - see https://hub.docker.com/r/prodrigestivill/postgres-backup-local/tags
  # tag: "12"

  ## set to true if you would like to see extra information on logs
  ## It turns BASH and/or NAMI debugging in the image
  ##
  debug: false

  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: https://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: IfNotPresent
  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ## Example:
  ## pullSecrets:
  ##   - myRegistryKeySecretName
  ##
  pullSecrets: []
